/*
 * The MIT License
 *
 * Copyright 2024 samueladebowale.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.cometbid.sample.ecommerce.api.product;

import static java.util.stream.Collectors.toList;
import static java.util.stream.Collectors.toSet;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;
import java.util.List;
import java.util.Objects;
import java.util.stream.StreamSupport;
import org.cometbid.sample.ecommerce.api.entity.ProductEntity;
import org.cometbid.swaggerCodeGen.model.Product;
import org.cometbid.swaggerCodeGen.model.Tag;
import org.springframework.beans.BeanUtils;
import org.springframework.hateoas.server.mvc.RepresentationModelAssemblerSupport;
import org.springframework.stereotype.Component;

/**
 *
 * @author samueladebowale
 */
@Component
public class ProductRepresentationModelAssembler extends
        RepresentationModelAssemblerSupport<ProductEntity, Product> {

    /**
     * Creates a new {@link RepresentationModelAssemblerSupport} using the given
     * controller class and resource type.
     */
    public ProductRepresentationModelAssembler() {
        super(ProductController.class, Product.class);
    }

    /**
     * Coverts the Product entity to resource
     *
     * @param entity
     */
    @Override
    public Product toModel(ProductEntity entity) {
        Product resource = createModelWithId(entity.getId(), entity);
        BeanUtils.copyProperties(entity, resource);
        resource.setId(entity.getId().toString());

        resource.setTags(
                entity.getTags().stream().map(t -> new Tag().id(t.getId().toString()).name(t.getName()))
                        .collect(toSet()));
        // Self link generated by createModelWithId has missing api path. Therefore, generating additionally.
        // can be removed once fixed.
        resource.add(linkTo(methodOn(ProductController.class).getProductById(entity.getId().toString()))
                .withSelfRel());
        resource.add(linkTo(methodOn(ProductController.class).queryProducts(null, null, 1, 10))
                .withRel("products"));
        return resource;
    }

    /**
     * Coverts the collection of Product entities to list of resources.
     *
     * @param entities
     * @return 
     */
    public List<Product> toListModel(Iterable<ProductEntity> entities) {
        if (Objects.isNull(entities)) {
            return List.of();
        }
        return StreamSupport.stream(entities.spliterator(), false).map(this::toModel)
                .collect(toList());
    }
}
